# .github/workflows/ci.yaml
name: dbt Core CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  dbt_debug_check:
    name: Run dbt debug
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./data-pipeline-stack

    steps:
      - name: 1. Check out repository
        uses: actions/checkout@v4

      - name: 2. Verify Docker Compose
        run: |
          echo "Checking Docker Compose version..."
          docker compose version

      - name: 3. Create CI-specific Dockerfile with git
        run: |
          echo "Creating CI Dockerfile..."
          cat > airflow/Dockerfile.ci << 'EOF'
          FROM apache/airflow:2.9.2-python3.11

          ARG AIRFLOW_UID=50000
          ARG AIRFLOW_GID=50000

          USER root

          # Install git for dbt debug
          RUN apt-get update && \
              apt-get install -y --no-install-recommends git && \
              apt-get clean && \
              rm -rf /var/lib/apt/lists/*

          # Create directories and set permissions
          RUN mkdir -p /opt/dbt/logs /opt/dbt/target /opt/dbt/models \
              /opt/dbt_project/logs /opt/dbt_project/target && \
              chown -R ${AIRFLOW_UID}:${AIRFLOW_GID} /opt/dbt /opt/dbt_project && \
              chmod -R 775 /opt/dbt /opt/dbt_project

          COPY requirements.txt .

          USER airflow
          RUN pip install --no-cache-dir -r requirements.txt
          EOF
          
          echo "CI Dockerfile created"

      - name: 4. Fix permissions for dbt directories
        run: |
          echo "Setting up permissions..."
          mkdir -p dbt_project/logs dbt_project/target
          sudo chown -R 50000:0 dbt_project/
          sudo chmod -R 775 dbt_project/
          ls -la dbt_project/

      - name: 5. Start all services with CI config
        run: |
          echo "Starting services..."
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up --build -d
          echo "Services started"

      - name: 6. Wait for services to become healthy
        run: |
          echo "Waiting for services..."
          end_time=$((SECONDS+180))
          
          while [ $SECONDS -lt $end_time ]; do
            echo "Checking health... (${SECONDS}s)"
            docker compose ps
            echo ""
            
            if docker compose ps | grep -q "dbt_clickhouse.*healthy" && \
               docker compose ps | grep -q "airflow-webserver.*healthy"; then
              echo "All services healthy!"
              break
            fi
            
            sleep 10
          done
          
          if [ $SECONDS -ge $end_time ]; then
            echo "Timeout waiting for services"
            docker compose ps
            docker compose logs --tail=100
            exit 1
          fi

      - name: 7. Run dbt debug
        run: |
          echo "Running dbt debug..."
          docker compose exec -T -w /opt/dbt_project airflow-webserver dbt debug --target docker_pipeline

      - name: 8. Show logs on failure
        if: failure()
        run: |
          echo "Showing logs..."
          docker compose logs --tail=200 airflow-webserver
          docker compose logs --tail=100 dbt_clickhouse

      - name: 9. Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v
          rm -f airflow/Dockerfile.ci docker-compose.ci.yml
          echo "Cleanup complete"
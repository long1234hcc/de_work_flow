# .github/workflows/ci.yaml
name: dbt Core CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  dbt_debug_check:
    name: Run dbt debug
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./data-pipeline-stack

    steps:
      - name: 1. Check out repository
        uses: actions/checkout@v4

      - name: 2. Verify Docker Compose
        run: |
          echo "Checking Docker Compose version..."
          docker compose version

      - name: 5. Start all services with CI config
        run: |
          echo "Starting services..."
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up --build -d
          echo "Services started"

      - name: 6. Wait for services to become healthy
        run: |
          echo "Waiting for services..."
          end_time=$((SECONDS+180))
          
          while [ $SECONDS -lt $end_time ]; do
            echo "Checking health... (${SECONDS}s)"
            docker compose ps
            echo ""
            
            if docker compose ps | grep -q "dbt_clickhouse.*healthy" && \
               docker compose ps | grep -q "airflow-webserver.*healthy"; then
              echo "All services healthy!"
              break
            fi
            
            sleep 10
          done
          
          if [ $SECONDS -ge $end_time ]; then
            echo "Timeout waiting for services"
            docker compose ps
            docker compose logs --tail=100
            exit 1
          fi

      - name: 7. Verify git installation
        run: |
          echo "Verifying git installation..."
          docker compose exec -T airflow-webserver which git
          docker compose exec -T airflow-webserver git --version

      - name: 8. Run dbt debug
        run: |
          echo "Running dbt debug..."
          docker compose exec -T -w /opt/dbt_project airflow-webserver dbt debug --target docker_pipeline

      - name: 9. Show logs on failure
        if: failure()
        run: |
          echo "Showing logs..."
          docker compose logs --tail=200 airflow-webserver
          docker compose logs --tail=100 dbt_clickhouse
          docker compose logs --tail=100 postgres

      - name: 10. Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v
          rm -f docker-compose.ci.yml
          echo "Cleanup complete"